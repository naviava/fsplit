/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LandingRouteImport } from './routes/_landing'
import { Route as LandingIndexRouteImport } from './routes/_landing/index'
import { Route as LandingTermsRouteImport } from './routes/_landing/terms'
import { Route as LandingPrivacyPolicyRouteImport } from './routes/_landing/privacy-policy'
import { Route as LandingContactRouteImport } from './routes/_landing/contact'

const LandingRoute = LandingRouteImport.update({
  id: '/_landing',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingIndexRoute = LandingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LandingRoute,
} as any)
const LandingTermsRoute = LandingTermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => LandingRoute,
} as any)
const LandingPrivacyPolicyRoute = LandingPrivacyPolicyRouteImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => LandingRoute,
} as any)
const LandingContactRoute = LandingContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => LandingRoute,
} as any)

export interface FileRoutesByFullPath {
  '/contact': typeof LandingContactRoute
  '/privacy-policy': typeof LandingPrivacyPolicyRoute
  '/terms': typeof LandingTermsRoute
  '/': typeof LandingIndexRoute
}
export interface FileRoutesByTo {
  '/contact': typeof LandingContactRoute
  '/privacy-policy': typeof LandingPrivacyPolicyRoute
  '/terms': typeof LandingTermsRoute
  '/': typeof LandingIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_landing': typeof LandingRouteWithChildren
  '/_landing/contact': typeof LandingContactRoute
  '/_landing/privacy-policy': typeof LandingPrivacyPolicyRoute
  '/_landing/terms': typeof LandingTermsRoute
  '/_landing/': typeof LandingIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/contact' | '/privacy-policy' | '/terms' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/contact' | '/privacy-policy' | '/terms' | '/'
  id:
    | '__root__'
    | '/_landing'
    | '/_landing/contact'
    | '/_landing/privacy-policy'
    | '/_landing/terms'
    | '/_landing/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LandingRoute: typeof LandingRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_landing': {
      id: '/_landing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LandingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_landing/': {
      id: '/_landing/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LandingIndexRouteImport
      parentRoute: typeof LandingRoute
    }
    '/_landing/terms': {
      id: '/_landing/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof LandingTermsRouteImport
      parentRoute: typeof LandingRoute
    }
    '/_landing/privacy-policy': {
      id: '/_landing/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof LandingPrivacyPolicyRouteImport
      parentRoute: typeof LandingRoute
    }
    '/_landing/contact': {
      id: '/_landing/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof LandingContactRouteImport
      parentRoute: typeof LandingRoute
    }
  }
}

interface LandingRouteChildren {
  LandingContactRoute: typeof LandingContactRoute
  LandingPrivacyPolicyRoute: typeof LandingPrivacyPolicyRoute
  LandingTermsRoute: typeof LandingTermsRoute
  LandingIndexRoute: typeof LandingIndexRoute
}

const LandingRouteChildren: LandingRouteChildren = {
  LandingContactRoute: LandingContactRoute,
  LandingPrivacyPolicyRoute: LandingPrivacyPolicyRoute,
  LandingTermsRoute: LandingTermsRoute,
  LandingIndexRoute: LandingIndexRoute,
}

const LandingRouteWithChildren =
  LandingRoute._addFileChildren(LandingRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LandingRoute: LandingRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
